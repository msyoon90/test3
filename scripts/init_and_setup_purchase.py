# File: scripts/init_and_setup_purchase.py

import sqlite3
import os
import sys
from datetime import datetime, timedelta
import random

def get_db_path():
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞"""
    # Ïä§ÌÅ¨Î¶ΩÌä∏ ÏúÑÏπòÏóê Îî∞Îùº Í≤ΩÎ°ú Ï°∞Ï†ï
    current_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(current_dir)
    
    # Í∞ÄÎä•Ìïú Í≤ΩÎ°úÎì§ ÌôïÏù∏
    possible_paths = [
        os.path.join(parent_dir, 'data', 'database.db'),
        os.path.join(current_dir, '..', 'data', 'database.db'),
        'data/database.db',
        '../data/database.db'
    ]
    
    # Ï°¥Ïû¨ÌïòÎäî Í≤ΩÎ°ú Ï∞æÍ∏∞
    for path in possible_paths:
        if os.path.exists(path):
            print(f"‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï∞æÏùå: {path}")
            return path
    
    # ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
    data_dir = os.path.join(parent_dir, 'data')
    os.makedirs(data_dir, exist_ok=True)
    db_path = os.path.join(data_dir, 'database.db')
    print(f"üìÅ ÏÉà Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±: {db_path}")
    return db_path

def init_all_tables(conn):
    """Î™®Îì† ÌïÑÏöîÌïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    cursor = conn.cursor()
    
    print("\nüîß ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏãúÏûë...")
    
    # 1. Í∏∞Î≥∏ ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏î
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS system_config (
            key TEXT PRIMARY KEY,
            value TEXT,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # 2. MES ÌÖåÏù¥Î∏î
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS work_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            lot_number TEXT NOT NULL,
            work_date DATE NOT NULL,
            process TEXT NOT NULL,
            worker_id INTEGER,
            plan_qty INTEGER,
            prod_qty INTEGER,
            defect_qty INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (worker_id) REFERENCES users (id)
        )
    ''')
    
    # 3. Ïû¨Í≥†Í¥ÄÎ¶¨ ÌÖåÏù¥Î∏î - Ï§ëÏöî!
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS item_master (
            item_code TEXT PRIMARY KEY,
            item_name TEXT NOT NULL,
            category TEXT,
            unit TEXT DEFAULT 'EA',
            safety_stock INTEGER DEFAULT 0,
            current_stock INTEGER DEFAULT 0,
            unit_price REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("  ‚úÖ item_master ÌÖåÏù¥Î∏î ÏÉùÏÑ±")
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stock_movements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            movement_date DATE NOT NULL,
            movement_type TEXT NOT NULL,
            item_code TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            warehouse TEXT,
            remarks TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (item_code) REFERENCES item_master (item_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS stock_adjustments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            adjustment_date DATE NOT NULL,
            item_code TEXT NOT NULL,
            adjustment_type TEXT,
            before_qty INTEGER,
            after_qty INTEGER,
            difference INTEGER,
            reason TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (item_code) REFERENCES item_master (item_code)
        )
    ''')
    
    # 4. Íµ¨Îß§Í¥ÄÎ¶¨ ÌÖåÏù¥Î∏î
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS supplier_master (
            supplier_code TEXT PRIMARY KEY,
            supplier_name TEXT NOT NULL,
            business_no TEXT,
            ceo_name TEXT,
            contact_person TEXT,
            phone TEXT,
            email TEXT,
            address TEXT,
            payment_terms TEXT DEFAULT 'CASH',
            lead_time INTEGER DEFAULT 7,
            rating INTEGER DEFAULT 3,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("  ‚úÖ supplier_master ÌÖåÏù¥Î∏î ÏÉùÏÑ±")
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchase_orders (
            po_number TEXT PRIMARY KEY,
            po_date DATE NOT NULL,
            supplier_code TEXT NOT NULL,
            delivery_date DATE,
            warehouse TEXT,
            total_amount REAL DEFAULT 0,
            status TEXT DEFAULT 'draft',
            approved_by INTEGER,
            approved_date TIMESTAMP,
            remarks TEXT,
            created_by INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (supplier_code) REFERENCES supplier_master (supplier_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchase_order_details (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            po_number TEXT NOT NULL,
            item_code TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            unit_price REAL NOT NULL,
            amount REAL NOT NULL,
            received_qty INTEGER DEFAULT 0,
            remarks TEXT,
            FOREIGN KEY (po_number) REFERENCES purchase_orders (po_number),
            FOREIGN KEY (item_code) REFERENCES item_master (item_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS receiving_schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            po_number TEXT NOT NULL,
            scheduled_date DATE NOT NULL,
            item_code TEXT NOT NULL,
            expected_qty INTEGER NOT NULL,
            received_qty INTEGER DEFAULT 0,
            status TEXT DEFAULT 'pending',
            FOREIGN KEY (po_number) REFERENCES purchase_orders (po_number),
            FOREIGN KEY (item_code) REFERENCES item_master (item_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS receiving_inspection (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            receiving_date DATE NOT NULL,
            po_number TEXT NOT NULL,
            item_code TEXT NOT NULL,
            received_qty INTEGER NOT NULL,
            accepted_qty INTEGER NOT NULL,
            rejected_qty INTEGER DEFAULT 0,
            inspection_result TEXT,
            inspector_id INTEGER,
            remarks TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (po_number) REFERENCES purchase_orders (po_number),
            FOREIGN KEY (item_code) REFERENCES item_master (item_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS auto_po_rules (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            item_code TEXT NOT NULL,
            supplier_code TEXT NOT NULL,
            reorder_point INTEGER NOT NULL,
            order_qty INTEGER NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (item_code) REFERENCES item_master (item_code),
            FOREIGN KEY (supplier_code) REFERENCES supplier_master (supplier_code)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS form_templates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            config TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    print("‚úÖ Î™®Îì† ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å")

def add_basic_data(conn):
    """Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä"""
    cursor = conn.cursor()
    
    # 1. Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê
    cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")
    if cursor.fetchone()[0] == 0:
        cursor.execute(
            "INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
            ('admin', 'admin123', 'admin')
        )
        print("‚úÖ Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ± (admin/admin123)")
    
    # 2. Í∏∞Î≥∏ ÌíàÎ™© Îç∞Ïù¥ÌÑ∞
    cursor.execute("SELECT COUNT(*) FROM item_master")
    if cursor.fetchone()[0] == 0:
        print("\nüì¶ Í∏∞Î≥∏ ÌíàÎ™© Ï∂îÍ∞Ä Ï§ë...")
        sample_items = [
            ('BOLT-M10', 'Î≥ºÌä∏ M10x30', 'Î∂ÄÌíà', 'EA', 500, 750, 150),
            ('BOLT-M12', 'Î≥ºÌä∏ M12x40', 'Î∂ÄÌíà', 'EA', 300, 420, 200),
            ('NUT-M10', 'ÎÑàÌä∏ M10', 'Î∂ÄÌíà', 'EA', 500, 800, 80),
            ('NUT-M12', 'ÎÑàÌä∏ M12', 'Î∂ÄÌíà', 'EA', 300, 350, 100),
            ('PLATE-1.0', 'Ï≤†Ìåê 1.0T', 'ÏõêÏûêÏû¨', 'EA', 50, 75, 15000),
            ('PLATE-2.0', 'Ï≤†Ìåê 2.0T', 'ÏõêÏûêÏû¨', 'EA', 30, 45, 25000),
            ('MOTOR-DC24', 'Î™®ÌÑ∞ DC24V', 'Î∂ÄÌíà', 'EA', 20, 25, 85000),
            ('MOTOR-AC220', 'Î™®ÌÑ∞ AC220V', 'Î∂ÄÌíà', 'EA', 15, 18, 120000),
            ('BEARING-6201', 'Î≤†Ïñ¥ÎßÅ 6201', 'Î∂ÄÌíà', 'EA', 100, 150, 3500),
            ('BEARING-6202', 'Î≤†Ïñ¥ÎßÅ 6202', 'Î∂ÄÌíà', 'EA', 100, 80, 4500),
            ('OIL-10W30', 'ÏóîÏßÑÏò§Ïùº 10W30', 'ÏÜåÎ™®Ìíà', 'L', 50, 60, 8000),
            ('GREASE-MP2', 'Íµ¨Î¶¨Ïä§ MP2', 'ÏÜåÎ™®Ìíà', 'KG', 20, 25, 15000)
        ]
        
        for item in sample_items:
            try:
                cursor.execute("""
                    INSERT INTO item_master 
                    (item_code, item_name, category, unit, safety_stock, current_stock, unit_price)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, item)
            except sqlite3.IntegrityError:
                pass  # Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ Î¨¥Ïãú
        
        print(f"  ‚úÖ {len(sample_items)}Í∞ú ÌíàÎ™© Ï∂îÍ∞Ä ÏôÑÎ£å")
    
    conn.commit()

def add_purchase_data(conn):
    """Íµ¨Îß§Í¥ÄÎ¶¨ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä"""
    cursor = conn.cursor()
    
    # 1. Í±∞ÎûòÏ≤ò Îç∞Ïù¥ÌÑ∞
    print("\nüè¢ Í±∞ÎûòÏ≤ò Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ï§ë...")
    suppliers = [
        ('SUP001', '(Ï£º)ÌïúÍµ≠Î∂ÄÌíà', '123-45-67890', 'ÍπÄÏ≤†Ïàò', 'Ïù¥ÏòÅÌù¨', '02-1234-5678', 
         'purchase@kparts.com', 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123', 'NET30', 7, 5),
        ('SUP002', 'ÎåÄÌïúÏ≤†Í∞ï(Ï£º)', '234-56-78901', 'Î∞ïÎØºÏàò', 'ÏµúÏßÄÌõà', '031-987-6543',
         'steel@daehan.co.kr', 'Í≤ΩÍ∏∞ÎèÑ ÏïàÏÇ∞Ïãú Í≥µÎã®Î°ú 456', 'NET60', 10, 4),
        ('SUP003', 'Í∏ÄÎ°úÎ≤åÎ™®ÌÑ∞Ïä§', '345-67-89012', 'Ïù¥ÏÉÅÌõà', 'ÍπÄÎØ∏ÏòÅ', '032-555-1234',
         'motor@global.com', 'Ïù∏Ï≤úÏãú ÎÇ®ÎèôÍµ¨ ÏÇ∞ÏóÖÎ°ú 789', 'NET30', 5, 5),
        ('SUP004', 'Ï†ïÎ∞ÄÍ∏∞Í≥Ñ(Ï£º)', '456-78-90123', 'Ï†ïÎåÄÌëú', 'Î∞ïÍ≥ºÏû•', '051-777-8888',
         'sales@precision.kr', 'Î∂ÄÏÇ∞Ïãú ÏÇ¨ÏÉÅÍµ¨ Í≥µÏû•Î°ú 321', 'CASH', 3, 3),
        ('SUP005', 'ÏÜåÎ™®ÌíàÎßàÌä∏', '567-89-01234', 'ÏµúÏÇ¨Ïû•', 'ÍπÄÎåÄÎ¶¨', '02-3333-4444',
         'order@supplies.com', 'ÏÑúÏö∏Ïãú Í∏àÏ≤úÍµ¨ ÎîîÏßÄÌÑ∏Î°ú 999', 'NET30', 2, 4)
    ]
    
    for supplier in suppliers:
        try:
            cursor.execute("""
                INSERT OR REPLACE INTO supplier_master 
                (supplier_code, supplier_name, business_no, ceo_name, contact_person,
                 phone, email, address, payment_terms, lead_time, rating, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
            """, supplier)
        except Exception as e:
            print(f"  Ïò§Î•ò: {supplier[0]} - {e}")
    
    print(f"  ‚úÖ {len(suppliers)}Í∞ú Í±∞ÎûòÏ≤ò Ï∂îÍ∞Ä ÏôÑÎ£å")
    
    # 2. Î∞úÏ£ºÏÑú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
    print("\nüìã Î∞úÏ£ºÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä Ï§ë...")
    
    # ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌíàÎ™© Ï°∞Ìöå
    cursor.execute("SELECT item_code, unit_price FROM item_master")
    available_items = cursor.fetchall()
    
    po_count = 0
    for i in range(30, -1, -3):  # 3Ïùº Í∞ÑÍ≤©ÏúºÎ°ú 30ÏùºÏπò
        po_date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
        
        # ÌïòÎ£®Ïóê 1-2Í±¥Ïùò Î∞úÏ£º
        for j in range(random.randint(1, 2)):
            po_number = f"PO-{po_date.replace('-', '')}-{j+1:03d}"
            supplier_code = random.choice([s[0] for s in suppliers])
            delivery_date = (datetime.strptime(po_date, '%Y-%m-%d') + 
                           timedelta(days=random.randint(3, 10))).strftime('%Y-%m-%d')
            
            # ÏÉÅÌÉú Í≤∞Ï†ï
            if i > 20:
                status = 'completed'
            elif i > 10:
                status = random.choice(['approved', 'receiving', 'completed'])
            else:
                status = random.choice(['draft', 'pending', 'approved'])
            
            total_amount = 0
            
            try:
                # Î∞úÏ£ºÏÑú Ìó§Îçî
                cursor.execute("""
                    INSERT OR IGNORE INTO purchase_orders
                    (po_number, po_date, supplier_code, delivery_date, warehouse,
                     total_amount, status, remarks, created_by)
                    VALUES (?, ?, ?, ?, 'wh1', 0, ?, 'ÏÉòÌîå Î∞úÏ£º', 1)
                """, (po_number, po_date, supplier_code, delivery_date, status))
                
                # Î∞úÏ£º ÏÉÅÏÑ∏ (ÌíàÎ™© 2-4Í∞ú)
                num_items = min(random.randint(2, 4), len(available_items))
                selected_items = random.sample(available_items, num_items)
                
                for item_code, unit_price in selected_items:
                    quantity = random.randint(10, 200)
                    amount = quantity * unit_price
                    total_amount += amount
                    
                    cursor.execute("""
                        INSERT INTO purchase_order_details
                        (po_number, item_code, quantity, unit_price, amount)
                        VALUES (?, ?, ?, ?, ?)
                    """, (po_number, item_code, quantity, unit_price, amount))
                
                # Ï¥ùÏï° ÏóÖÎç∞Ïù¥Ìä∏
                cursor.execute("""
                    UPDATE purchase_orders SET total_amount = ? 
                    WHERE po_number = ?
                """, (total_amount, po_number))
                
                po_count += 1
                
            except Exception as e:
                print(f"  Î∞úÏ£ºÏÑú ÏÉùÏÑ± Ïò§Î•ò: {po_number} - {e}")
    
    print(f"  ‚úÖ {po_count}Í∞ú Î∞úÏ£ºÏÑú Ï∂îÍ∞Ä ÏôÑÎ£å")
    
    # 3. ÏûêÎèô Î∞úÏ£º Í∑úÏπô
    print("\n‚öôÔ∏è ÏûêÎèô Î∞úÏ£º Í∑úÏπô Ï∂îÍ∞Ä Ï§ë...")
    
    auto_rules = [
        ('BOLT-M10', 'SUP001', 300, 500),
        ('NUT-M10', 'SUP001', 300, 500),
        ('MOTOR-DC24', 'SUP003', 10, 20),
        ('BEARING-6201', 'SUP004', 50, 100),
        ('OIL-10W30', 'SUP005', 30, 50)
    ]
    
    for rule in auto_rules:
        try:
            cursor.execute("""
                INSERT OR IGNORE INTO auto_po_rules
                (item_code, supplier_code, reorder_point, order_qty, is_active)
                VALUES (?, ?, ?, ?, 1)
            """, rule)
        except:
            pass
    
    print(f"  ‚úÖ {len(auto_rules)}Í∞ú ÏûêÎèô Î∞úÏ£º Í∑úÏπô Ï∂îÍ∞Ä ÏôÑÎ£å")
    
    conn.commit()

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    print("üöÄ Smart MES-ERP Íµ¨Îß§Í¥ÄÎ¶¨ Î™®Îìà ÏÑ§Ï†ï")
    print("=" * 50)
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ΩÎ°ú Ï∞æÍ∏∞
    db_path = get_db_path()
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
    conn = sqlite3.connect(db_path)
    
    try:
        # 1. ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        init_all_tables(conn)
        
        # 2. Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
        add_basic_data(conn)
        
        # 3. Íµ¨Îß§Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
        add_purchase_data(conn)
        
        print("\n‚úÖ Î™®Îì† ÏÑ§Ï†ï ÏôÑÎ£å!")
        print("\nüí° Ïù¥Ï†ú Îã§Ïùå Î™ÖÎ†πÏúºÎ°ú Ïï±ÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî:")
        print("   cd ..")
        print("   python app.py")
        
    except Exception as e:
        print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        import traceback
        traceback.print_exc()
    finally:
        conn.close()

if __name__ == "__main__":
    main()